from my understanding is shit is way less dynamic in assembly. Shit is very much hardcoded
to appear dynamic. It's a different style of thinking

remember, functions/procedures as i know them are a property of these higher level
languages. That functionality is what i'm trying to emulate in assembly

how to do conditionals:
random():
        push    rbp
        mov     rbp, rsp
        mov     DWORD PTR [rbp-4], 8
        cmp     DWORD PTR [rbp-4], 8 ; makes the comparison 0)
        jne     .L2                  ; conditional jump to the true part of if 4)
        add     DWORD PTR [rbp-4], 1 ; this is the else statement 1)
        jmp     .L3
.L2:
        sub     DWORD PTR [rbp-4], 1 ; this is the true part of if statement 2)
.L3:
        mov     eax, DWORD PTR [rbp-4] ; return statment
        pop     rbp
        ret

is from this

  int random(){
      int x = 8;
      if (x == 8) { // 0)
          x++;      // 2)
      } else {
          x--;      // 1)
      }
      return x;
  }

0) sets flags for conditional
4) conditionalls jumps to .L2, which is the true part of the statement. If it gets there,
    after it executes, it will then go to .L3 (since assembly be default executes down the
    line and there is no ret in .L@), which is the return statement in the c code.
1) if the conditional jump at 4) isn't executed, then it hits this, which is the else block
    , then hits the the jump to .L3 also

seems cool and elegant