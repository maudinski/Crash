have to add:
arrays (non appendable, immutable in size)
print
scan
structs
imports
cmon man variadic functions are needed

also, haven't tested the lexer with tossing bugs in it

i don't need to be using make, i cant just be saying somestruct.somelice = []sometype

I'm probably writing pretty inefficient code by never returning pointers. Using
new() would allocate memory but return an 8 byte pointer as opposed (apposed?) to
an entire struct. Not sure though, cause there's a trade off with garbage collection

If blocks only consisting of statements becomes a problem for function calls, i can
just make all expressions implement the statement interface too, so they can be out there
on their own. Prefer not to though

a lot of this hasnt been error tested

some builtins needed:
print(4, x + 9)
string s = scan("Enter something"), basically a call to print then scans and returns
alloc(int) takes a type, and only maybe
free(x) takes the allocated variable, and only maybe
type casters: int() float() string(), string to int might only be possible with multiple
            return types
someArray.append(somevalue)
    probably won't actually be a method or anything, maybe just a special case in the
    compiler. Will trasnfer everything over to a new memmory location that's one slot
    longer, then reset the variable to that location in memory
// this is some later shit, no joke this will be pretty fucking hard
remove(file)
file = open("filename")
string text = read(file)
write(file, text + "\n")
exit()
continue

the fact that function return types are after the id and paramters is tied into the lexer
and used for it to work. don't fuck with it

fuck it, parser won't queue up errors

i guess three returns max ? have three dedicated registers for returns

