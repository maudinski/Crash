prolly void all this


maybe have it recursive
whole program is executed as a function, and everytime it hits a function it
will save that data off in a map or something (but not evaluate it yet)
then when the function is called, it will recursively call the same lexer/parser
/whatever function on that function with some pre-existing tokens (the
parameters). so like func lexerParserGod(preExistingTokens ...interfac{}) or
something and that shit is recursive. Also has a map of variables defined inside
it (not globally) and a map of functions. Maybe defined structs can also be
passed as a token, which means the scope of a struct is the function its written
in and any nested functions.

general procedure for evaluating a function could be:
1 parse the whole function first
    store functions, remove from stream
    store structs, remove from stream
    idk about anything else
2 then lex/parse/whatever the cleansed stream
    recurse when a function is called and value/behavior is needed

on second though, lexing and parsing may be done regardless all at once
